#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Thu Jun 27 15:14:10 2019"
echo "(version 6.32, February 22, 2019)"
echo "execution started: `date`"

# to execute via tcsh: 
#   tcsh -xef afni_proc.nlregFSLdone_doublesub_vol |& tee output.afni_proc.nlregFSLdone_doublesub_vol
# to execute via bash: 
#   tcsh -xef afni_proc.nlregFSLdone_doublesub_vol 2>&1 | tee output.afni_proc.nlregFSLdone_doublesub_vol

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 17 Jan 2019
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 17 Jan 2019)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = RPMS_2001
endif

# assign output directory name
set output_dir = $subj.results.nlregFSLdone.doublesub.vol

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 6`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp ${subj}/${subj}_txtuAM.txt ${subj}/${subj}_txtrAM.txt  \
    ${subj}/${subj}_symuAM.txt ${subj}/${subj}_symrAM.txt \
    $output_dir/stimuli

# copy anatomy to results dir
3dcopy ${subj}/${subj}_anat+orig $output_dir/${subj}_anat

# copy external motion file into results dir
cp ${subj}.results.nlregFSLdone.vol/dfile_rall.1D $output_dir

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir,
# while removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat \
    ${subj}.results.nlregFSLdone.vol/pb05.${subj}.r01.scale+tlrc'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat \
    ${subj}.results.nlregFSLdone.vol/pb05.${subj}.r02.scale+tlrc'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r03.tcat \
    ${subj}.results.nlregFSLdone.vol/pb05.${subj}.r03.scale+tlrc'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r04.tcat \
    ${subj}.results.nlregFSLdone.vol/pb05.${subj}.r04.scale+tlrc'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r05.tcat \
    ${subj}.results.nlregFSLdone.vol/pb05.${subj}.r05.scale+tlrc'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r06.tcat \
    ${subj}.results.nlregFSLdone.vol/pb05.${subj}.r06.scale+tlrc'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 201 201 201 201 201 201 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 3 -legendre                     \
                pb00.$subj.r$run.tcat+tlrc > outcount.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -prefix rm.mask_r$run pb00.$subj.r$run.tcat+tlrc
end

# create union of inputs, output type is byte
3dmask_tool -inputs rm.mask_r*+tlrc.HEAD -union -prefix full_mask.$subj

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 6                            \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (just to have)
1d_tool.py -infile dfile_rall.1D -set_nruns 6                            \
           -derivative -demean -write motion_deriv.1D

# convert motion parameters for per-run regression
1d_tool.py -infile motion_demean.1D -set_nruns 6                         \
           -split_into_pad_runs mot_demean

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile_rall.1D -set_nruns 6                            \
    -show_censor_count -censor_prev_TR                                   \
    -censor_motion 0.5 motion_${subj}

# note TRs that were not censored
set ktrs = `1d_tool.py -infile motion_${subj}_censor.1D                  \
                       -show_trs_uncensored encoded`

# ------------------------------
# run the regression analysis
3dDeconvolve -input pb00.$subj.r*.tcat+tlrc.HEAD                         \
    -mask full_mask.$subj+tlrc                                           \
    -censor motion_${subj}_censor.1D                                     \
    -ortvec mot_demean.r01.1D mot_demean_r01                             \
    -ortvec mot_demean.r02.1D mot_demean_r02                             \
    -ortvec mot_demean.r03.1D mot_demean_r03                             \
    -ortvec mot_demean.r04.1D mot_demean_r04                             \
    -ortvec mot_demean.r05.1D mot_demean_r05                             \
    -ortvec mot_demean.r06.1D mot_demean_r06                             \
    -polort 3 -float                                                     \
    -num_stimts 4                                                        \
    -stim_times_AM2 1 stimuli/${subj}_txtuAM.txt 'BLOCK(4,1)'          \
    -stim_label 1 TxtU                                                   \
    -stim_times_AM2 2 stimuli/${subj}_txtrAM.txt 'BLOCK(4,1)'          \
    -stim_label 2 TxtR                                                   \
    -stim_times_AM2 3 stimuli/${subj}_symuAM.txt 'BLOCK(4,1)'          \
    -stim_label 3 SymU                                                   \
    -stim_times_AM2 4 stimuli/${subj}_symrAM.txt 'BLOCK(4,1)'          \
    -stim_label 4 SymR                                                   \
    -num_glt 18                                                          \
    -gltsym 'SYM: SymU[0] SymR[0] -TxtU[0] -TxtR[0]'                     \
    -glt_label 1 Sym-Txt                                                 \
    -gltsym 'SYM: SymU[1] SymR[1] -TxtU[1] -TxtR[1]'                     \
    -glt_label 2 Sym-Txt_AM                                              \
    -gltsym 'SYM: SymR[0] TxtR[0] -SymU[0] -TxtU[0]'                     \
    -glt_label 3 Rule-Uni                                                \
    -gltsym 'SYM: SymR[1] TxtR[1] -SymU[1] -TxtU[1]'                     \
    -glt_label 4 Rule-Uni_AM                                             \
    -gltsym 'SYM: TxtR[0] -TxtU[0]'                                      \
    -glt_label 5 TxtR-TxtU                                               \
    -gltsym 'SYM: TxtR[1] -TxtU[1]'                                      \
    -glt_label 6 TxtR-TxtU_AM                                            \
    -gltsym 'SYM: SymR[0] -SymU[0]'                                      \
    -glt_label 7 SymR-SymU                                               \
    -gltsym 'SYM: SymR[1] -SymU[1]'                                      \
    -glt_label 8 SymR-SymU_AM                                            \
    -gltsym 'SYM: SymR[0] -TxtR[0]'                                      \
    -glt_label 9 SymR-TxtR                                               \
    -gltsym 'SYM: SymR[1] -TxtR[1]'                                      \
    -glt_label 10 SymR-TxtR_AM                                           \
    -gltsym 'SYM: SymU[0] -TxtU[0]'                                      \
    -glt_label 11 SymU-TxtU                                              \
    -gltsym 'SYM: SymU[1] -TxtU[1]'                                      \
    -glt_label 12 SymU-TxtU_AM                                           \
    -gltsym 'SYM: SymR[0] -TxtU[0]'                                      \
    -glt_label 13 SymR-TxtU                                              \
    -gltsym 'SYM: SymR[1] -TxtU[1]'                                      \
    -glt_label 14 SymR-TxtU_AM                                           \
    -gltsym 'SYM: TxtR[0] -SymU[0]'                                      \
    -glt_label 15 TxtR-SymU                                              \
    -gltsym 'SYM: TxtR[1] -SymU[1]'                                      \
    -glt_label 16 TxtR-SymU_AM                                           \
    -gltsym 'SYM: SymR[0] -SymU[0] -TxtR[0] TxtU[0]'                     \
    -glt_label 17 Double_Sub                                             \
    -gltsym 'SYM: SymR[1] -SymU[1] -TxtR[1] TxtU[1]'                     \
    -glt_label 18 Double_Sub_AM                                          \
    -jobs 4                                                              \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                              \
    -x1D_uncensored X.nocensor.xmat.1D                                   \
    -errts errts.${subj}                                                 \
    -x1D_stop                                                            \
    -bucket stats.$subj


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pairwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# display degrees of freedom info from X-matrix
1d_tool.py -show_df_info -infile X.xmat.1D |& tee out.df_info.txt

# -- execute the 3dREMLfit script, written by 3dDeconvolve --
tcsh -x stats.REML_cmd 

# if 3dREMLfit fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dREMLfit error, failing...'
    exit
endif


# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb00.$subj.r*.tcat+tlrc.HEAD

# --------------------------------------------------
# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+tlrc"[$ktrs]"
3dTstat -stdev -prefix rm.noise.all errts.${subj}_REML+tlrc"[$ktrs]"
3dcalc -a rm.signal.all+tlrc                                             \
       -b rm.noise.all+tlrc                                              \
       -c full_mask.$subj+tlrc                                           \
       -expr 'c*a/b' -prefix TSNR.$subj 

# ---------------------------------------------------
# compute and store GCOR (global correlation average)
# (sum of squares of global mean of unit errts)
3dTnorm -norm2 -prefix rm.errts.unit errts.${subj}_REML+tlrc
3dmaskave -quiet -mask full_mask.$subj+tlrc rm.errts.unit+tlrc           \
          > gmean.errts.unit.1D
3dTstat -sos -prefix - gmean.errts.unit.1D\' > out.gcor.1D
echo "-- GCOR = `cat out.gcor.1D`"

# ---------------------------------------------------
# compute correlation volume
# (per voxel: average correlation across masked brain)
# (now just dot product with average unit time series)
3dcalc -a rm.errts.unit+tlrc -b gmean.errts.unit.1D -expr 'a*b' -prefix rm.DP
3dTstat -sum -prefix corr_brain rm.DP+tlrc


# create fitts from REML errts
3dcalc -a all_runs.$subj+tlrc -b errts.${subj}_REML+tlrc -expr a-b       \
       -prefix fitts.$subj\_REML

# --------------------------------------------------------
# compute sum of non-baseline regressors from the X-matrix
# (use 1d_tool.py to get list of regressor colums)
set reg_cols = `1d_tool.py -infile X.nocensor.xmat.1D -show_indices_interest`
3dTstat -sum -prefix IDEAL.1D X.nocensor.xmat.1D"[$reg_cols]"

# also, create a stimulus-only X-matrix, for easy review
1dcat X.nocensor.xmat.1D"[$reg_cols]" > X.stim.xmat.1D

# ============================ blur estimation =============================
# compute blur estimates
touch blur_est.$subj.1D   # start with empty file

# create directory for ACF curve files
mkdir files_ACF

# -- estimate blur for each run in epits --
touch blur.epits.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded \
                          -show_trs_run $run`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask full_mask.$subj+tlrc                          \
            -ACF files_ACF/out.3dFWHMx.ACF.epits.r$run.1D                \
            all_runs.$subj+tlrc"[$trs]" >> blur.epits.1D
end

# compute average FWHM blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D'{0..$(2)}'\'` )
echo average epits FWHM blurs: $blurs
echo "$blurs   # epits FWHM blur estimates" >> blur_est.$subj.1D

# compute average ACF blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.epits.1D'{1..$(2)}'\'` )
echo average epits ACF blurs: $blurs
echo "$blurs   # epits ACF blur estimates" >> blur_est.$subj.1D

# -- estimate blur for each run in err_reml --
touch blur.err_reml.1D

# restrict to uncensored TRs, per run
foreach run ( $runs )
    set trs = `1d_tool.py -infile X.xmat.1D -show_trs_uncensored encoded \
                          -show_trs_run $run`
    if ( $trs == "" ) continue
    3dFWHMx -detrend -mask full_mask.$subj+tlrc                          \
            -ACF files_ACF/out.3dFWHMx.ACF.err_reml.r$run.1D             \
            errts.${subj}_REML+tlrc"[$trs]" >> blur.err_reml.1D
end

# compute average FWHM blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.err_reml.1D'{0..$(2)}'\'` )
echo average err_reml FWHM blurs: $blurs
echo "$blurs   # err_reml FWHM blur estimates" >> blur_est.$subj.1D

# compute average ACF blur (from every other row) and append
set blurs = ( `3dTstat -mean -prefix - blur.err_reml.1D'{1..$(2)}'\'` )
echo average err_reml ACF blurs: $blurs
echo "$blurs   # err_reml ACF blur estimates" >> blur_est.$subj.1D


# add 3dClustSim results as attributes to any stats dset
mkdir files_ClustSim

# run Monte Carlo simulations using method 'ACF'
set params = ( `grep ACF blur_est.$subj.1D | tail -n 1` )
3dClustSim -both -mask full_mask.$subj+tlrc -acf $params[1-3]            \
           -cmd 3dClustSim.ACF.cmd -prefix files_ClustSim/ClustSim.ACF

# run 3drefit to attach 3dClustSim results to stats
set cmd = ( `cat 3dClustSim.ACF.cmd` )
$cmd stats.${subj}_REML+tlrc


# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj                               \
    -dsets pb00.$subj.r*.tcat+tlrc.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 0.5 -motion_dset dfile_rall.1D -exit0 \
    -ss_review_dset out.ss_review.$subj.txt                               \
    -write_uvars_json out.ss_review_uvars.json

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -f rm.*

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) then
    ./@ss_review_basic |& tee out.ss_review.$subj.txt

    # generate html ss review pages
    # (akin to static images from running @ss_review_driver)
    apqc_make_tcsh.py -review_style basic -subj_dir . \
        -uvar_json out.ss_review_uvars.json
    tcsh @ss_review_html |& tee out.review_html
    apqc_make_html.py -qc_dir QC_$subj

    echo "\nconsider running: \n\n    afni_open -b $subj.results/QC_$subj/index.html\n"
endif

# return to parent directory (just in case...)
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id ${subj} -script                                     \
#     afni_proc.nlregFSLdone_doublesub_vol -scr_overwrite -blocks mask        \
#     regress -dsets                                                          \
#     RPMS_2001.results.nlregFSLdone.vol/pb05.RPMS_2001.r01.scale+tlrc.HEAD   \
#     RPMS_2001.results.nlregFSLdone.vol/pb05.RPMS_2001.r02.scale+tlrc.HEAD   \
#     RPMS_2001.results.nlregFSLdone.vol/pb05.RPMS_2001.r03.scale+tlrc.HEAD   \
#     RPMS_2001.results.nlregFSLdone.vol/pb05.RPMS_2001.r04.scale+tlrc.HEAD   \
#     RPMS_2001.results.nlregFSLdone.vol/pb05.RPMS_2001.r05.scale+tlrc.HEAD   \
#     RPMS_2001.results.nlregFSLdone.vol/pb05.RPMS_2001.r06.scale+tlrc.HEAD   \
#     -copy_anat RPMS_2001/RPMS_2001_anat+orig -mask_apply epi                \
#     -regress_stim_times RPMS_2001/RPMS_2001_txtuAM.txt                      \
#     RPMS_2001/RPMS_2001_txtrAM.txt RPMS_2001/RPMS_2001_symuAM.txt           \
#     RPMS_2001/RPMS_2001_symrAM.txt -regress_stim_labels TxtU TxtR SymU SymR \
#     -regress_basis 'BLOCK(4,1)' -regress_stim_types AM2 AM2 AM2 AM2         \
#     -regress_motion_file RPMS_2001.results.nlregFSLdone.vol/dfile_rall.1D   \
#     -regress_motion_per_run -regress_censor_motion 0.5 -regress_opts_3dD    \
#     -num_glt 18 -gltsym 'SYM: SymU[0] SymR[0] -TxtU[0] -TxtR[0]' -glt_label \
#     1 Sym-Txt -gltsym 'SYM: SymU[1] SymR[1] -TxtU[1] -TxtR[1]' -glt_label 2 \
#     Sym-Txt_AM -gltsym 'SYM: SymR[0] TxtR[0] -SymU[0] -TxtU[0]' -glt_label  \
#     3 Rule-Uni -gltsym 'SYM: SymR[1] TxtR[1] -SymU[1] -TxtU[1]' -glt_label  \
#     4 Rule-Uni_AM -gltsym 'SYM: TxtR[0] -TxtU[0]' -glt_label 5 TxtR-TxtU    \
#     -gltsym 'SYM: TxtR[1] -TxtU[1]' -glt_label 6 TxtR-TxtU_AM -gltsym 'SYM: \
#     SymR[0] -SymU[0]' -glt_label 7 SymR-SymU -gltsym 'SYM: SymR[1]          \
#     -SymU[1]' -glt_label 8 SymR-SymU_AM -gltsym 'SYM: SymR[0] -TxtR[0]'     \
#     -glt_label 9 SymR-TxtR -gltsym 'SYM: SymR[1] -TxtR[1]' -glt_label 10    \
#     SymR-TxtR_AM -gltsym 'SYM: SymU[0] -TxtU[0]' -glt_label 11 SymU-TxtU    \
#     -gltsym 'SYM: SymU[1] -TxtU[1]' -glt_label 12 SymU-TxtU_AM -gltsym      \
#     'SYM: SymR[0] -TxtU[0]' -glt_label 13 SymR-TxtU -gltsym 'SYM: SymR[1]   \
#     -TxtU[1]' -glt_label 14 SymR-TxtU_AM -gltsym 'SYM: TxtR[0] -SymU[0]'    \
#     -glt_label 15 TxtR-SymU -gltsym 'SYM: TxtR[1] -SymU[1]' -glt_label 16   \
#     TxtR-SymU_AM -gltsym 'SYM: SymR[0] -SymU[0] -TxtR[0] TxtU[0]'           \
#     -glt_label 17 Double_Sub -gltsym 'SYM: SymR[1] -SymU[1] -TxtR[1]        \
#     TxtU[1]' -glt_label 18 Double_Sub_AM -jobs 4 -regress_compute_fitts     \
#     -regress_make_ideal_sum IDEAL.1D -regress_est_blur_epits                \
#     -regress_est_blur_errts -regress_run_clustsim yes -copy_anat            \
#     anat_warped/anatSS.RPMS_2001.nii -regress_3dD_stop -regress_reml_exec
