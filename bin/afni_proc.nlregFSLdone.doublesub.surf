#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Mon Jul  1 12:56:26 2019"
echo "(version 6.32, February 22, 2019)"
echo "execution started: `date`"

# to execute via tcsh: 
#   tcsh -xef proc.${subj} |& tee output.proc.${subj}
# to execute via bash: 
#   tcsh -xef proc.${subj} 2>&1 | tee output.proc.${subj}

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 17 Jan 2019
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 17 Jan 2019)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = RPMS_2001
endif

# assign output directory name
set output_dir = $subj.results.nlregFSLdone.doublesub.surf

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 6`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp ${subj}/${subj}_txtuAM.txt ${subj}/${subj}_txtrAM.txt  \
    ${subj}/${subj}_symuAM.txt ${subj}/${subj}_symrAM.txt \
    $output_dir/stimuli

# copy anatomy to results dir
3dcopy ${subj}/${subj}_anat+orig $output_dir/${subj}_anat

# copy external -tlrc_NL_warped_dsets datasets
3dcopy anat_warped_FSLmni152/anatQQ.${subj}.nii.gz      \
    $output_dir/anatQQ.${subj}
3dcopy anat_warped_FSLmni152/anatQQ.${subj}.aff12.1D    \
    $output_dir/anatQQ.${subj}.aff12.1D
3dcopy anat_warped_FSLmni152/anatQQ.${subj}_WARP.nii.gz \
    $output_dir/anatQQ.${subj}_WARP.nii.gz

# copy external -blip_forward_dset dataset
3dTcat -prefix $output_dir/blip_forward ${subj}/${subj}_fieldmap_ap+orig
# copy external -blip_reverse_dset dataset
3dTcat -prefix $output_dir/blip_reverse ${subj}/${subj}_fieldmap_pa+orig

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir,
# while removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat \
    ${subj}/${subj}_epi_r1+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat \
    ${subj}/${subj}_epi_r2+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r03.tcat \
    ${subj}/${subj}_epi_r3+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r04.tcat \
    ${subj}/${subj}_epi_r4+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r05.tcat \
    ${subj}/${subj}_epi_r5+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r06.tcat \
    ${subj}/${subj}_epi_r6+orig'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 201 201 201 201 201 201 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 3 -legendre                     \
                pb00.$subj.r$run.tcat+orig > outcount.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# get run number and TR index for minimum outlier volume
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       \
                          -index_to_run_tr $minindex` )
# save run and TR indices for extraction of vr_base_min_outlier
set minoutrun = $ovals[1]
set minouttr  = $ovals[2]
echo "min outlier: run $minoutrun, TR $minouttr" | tee out.min_outlier.txt

# ================================= tshift =================================
# time shift data so all slice timing is the same 
foreach run ( $runs )
    # CUSTOM START
    3dcopy pb00.$subj.r$run.tcat+orig pb00.$subj.r$run.tcat.nii
    bash /projectnb/sternlab/tom/RPMS/code/bin/sms_slicetime_correct.sh \
        3                                                                    \
        pb00.$subj.r$run.tcat.nii                                          \
        pb01.$subj.r$run.tshift.nii
    3dcopy pb01.$subj.r$run.tshift.nii pb01.$subj.r$run.tshift+orig

#    3dTshift -tzero 0 -quintic -prefix pb01.$subj.r$run.tshift \
#             pb00.$subj.r$run.tcat+orig
end
    # CUSTOM END

# ================================== blip ==================================
# compute blip up/down non-linear distortion correction for EPI

# create median datasets from forward and reverse time series
3dTstat -median -prefix rm.blip.med.fwd blip_forward+orig
3dTstat -median -prefix rm.blip.med.rev blip_reverse+orig

# automask the median datasets 
3dAutomask -apply_prefix rm.blip.med.masked.fwd rm.blip.med.fwd+orig
3dAutomask -apply_prefix rm.blip.med.masked.rev rm.blip.med.rev+orig

# compute the midpoint warp between the median datasets
3dQwarp -plusminus -pmNAMES Rev For                           \
        -pblur 0.05 0.05 -blur -1 -1                          \
        -noweight -minpatch 9                                 \
        -source rm.blip.med.masked.rev+orig                   \
        -base   rm.blip.med.masked.fwd+orig                   \
        -prefix blip_warp

# warp median datasets (forward and each masked) for QC checks
# (and preserve obliquity)
3dNwarpApply -quintic -nwarp blip_warp_For_WARP+orig          \
             -source rm.blip.med.fwd+orig                     \
             -prefix blip_med_for
3drefit -atrcopy blip_forward+orig IJK_TO_DICOM_REAL          \
                 blip_med_for+orig

3dNwarpApply -quintic -nwarp blip_warp_For_WARP+orig          \
             -source rm.blip.med.masked.fwd+orig              \
             -prefix blip_med_for_masked
3drefit -atrcopy blip_forward+orig IJK_TO_DICOM_REAL          \
                 blip_med_for_masked+orig

3dNwarpApply -quintic -nwarp blip_warp_Rev_WARP+orig          \
             -source rm.blip.med.masked.rev+orig              \
             -prefix blip_med_rev_masked
3drefit -atrcopy blip_reverse+orig IJK_TO_DICOM_REAL          \
                 blip_med_rev_masked+orig

# warp EPI time series data
foreach run ( $runs )
    3dNwarpApply -quintic -nwarp blip_warp_For_WARP+orig      \
                 -source pb01.$subj.r$run.tshift+orig         \
                 -prefix pb02.$subj.r$run.blip
    3drefit -atrcopy blip_forward+orig IJK_TO_DICOM_REAL      \
                     pb02.$subj.r$run.blip+orig
end

# --------------------------------
# extract volreg registration base
3dbucket -prefix vr_base_min_outlier                          \
    pb02.$subj.r$minoutrun.blip+orig"[$minouttr]"

# ================================= align ==================================
# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be intermediate, stripped, ${subj}_anat_ns+orig)
align_epi_anat.py -anat2epi -anat ${subj}_anat+orig \
       -save_skullstrip -suffix _al_junk              \
       -epi vr_base_min_outlier+orig -epi_base 0      \
       -epi_strip 3dAutomask                          \
       -volreg off -tshift off

# ================================== tlrc ==================================

# nothing to do: have external -tlrc_NL_warped_dsets

# warped anat     : anatQQ.${subj}+tlrc
# affine xform    : anatQQ.${subj}.aff12.1D
# non-linear warp : anatQQ.${subj}_WARP.nii.gz

# ================================= volreg =================================
# align each dset to base volume, blip warp, to anat, warp to tlrc space
# (final warp input is same as blip input)

# verify that we have a +tlrc warp dataset
if ( ! -f anatQQ.${subj}+tlrc.HEAD ) then
    echo "** missing +tlrc warp dataset: anatQQ.${subj}+tlrc.HEAD" 
    exit
endif

# register and warp
foreach run ( $runs )
    # register each volume to the base image
    3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig                  \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run               \
             -cubic                                                           \
             -1Dmatrix_save mat.r$run.vr.aff12.1D                             \
             pb02.$subj.r$run.blip+orig

    # create an all-1 dataset to mask the extents of the warp
    3dcalc -overwrite -a pb02.$subj.r$run.blip+orig -expr 1                   \
           -prefix rm.epi.all1

    # catenate blip/volreg/epi2anat/tlrc xforms
    cat_matvec -ONELINE                                                       \
               anatQQ.${subj}.aff12.1D                                      \
               ${subj}_anat_al_junk_mat.aff12.1D -I                         \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform: blip/volreg/epi2anat/tlrc/NLtlrc
    # then apply non-linear standard-space warp
    3dNwarpApply -master anatQQ.${subj}+tlrc -dxyz 2                        \
                 -source pb01.$subj.r$run.tshift+orig                         \
                 -nwarp "anatQQ.${subj}_WARP.nii.gz mat.r$run.warp.aff12.1D \
                 blip_warp_For_WARP+orig"                                     \
                 -prefix rm.epi.nomask.r$run

    # warp the all-1 dataset for extents masking 
    3dNwarpApply -master anatQQ.${subj}+tlrc -dxyz 2                        \
                 -source rm.epi.all1+orig                                     \
                 -nwarp "anatQQ.${subj}_WARP.nii.gz                         \
                 mat.r$run.warp.aff12.1D"                                     \
                 -interp cubic                                                \
                 -ainterp NN -quiet                                           \
                 -prefix rm.epi.1.r$run

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+tlrc
end

# make a single file of registration params
cat dfile.r*.1D > dfile_rall.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+tlrc
# (this is a mask of voxels that have valid data at every TR)
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r*.HEAD 
3dcalc -a rm.epi.mean+tlrc -expr 'step(a-0.999)' -prefix mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
    3dcalc -a rm.epi.nomask.r$run+tlrc -b mask_epi_extents+tlrc               \
           -expr 'a*b' -prefix pb03.$subj.r$run.volreg
end

# warp the volreg base EPI dataset to make a final version
cat_matvec -ONELINE                                                           \
           anatQQ.${subj}.aff12.1D                                          \
           ${subj}_anat_al_junk_mat.aff12.1D -I  > mat.basewarp.aff12.1D

3dNwarpApply -master anatQQ.${subj}+tlrc -dxyz 2                            \
             -source vr_base_min_outlier+orig                                 \
             -nwarp "anatQQ.${subj}_WARP.nii.gz mat.basewarp.aff12.1D"      \
             -prefix final_epi_vr_base_min_outlier

# create an anat_final dataset, aligned with stats
3dcopy anatQQ.${subj}+tlrc anat_final.$subj

# record final registration costs
3dAllineate -base final_epi_vr_base_min_outlier+tlrc -allcostX                \
            -input anat_final.$subj+tlrc |& tee out.allcostX.txt

# -----------------------------------------
# warp anat follower datasets (non-linear)
3dNwarpApply -source ${subj}_anat+orig                                      \
             -master anat_final.$subj+tlrc                                    \
             -ainterp wsinc5 -nwarp anatQQ.${subj}_WARP.nii.gz              \
             anatQQ.${subj}.aff12.1D                                        \
             -prefix anat_w_skull_warped

# ======================= surf (map data to surface) =======================
# map EPI data to the surface domain

# set directory variables
set surface_dir =                                                      \
    /projectnb/sternlab/tom/RPMS/scan_data/${subj}/afni/${subj}/SUMA

# align the surface anatomy with the current experiment anatomy
@SUMA_AlignToExperiment -exp_anat anat_final.$subj+tlrc                \
                        -surf_anat $surface_dir/${subj}_SurfVol+orig \
                        -wd -strip_skull surf_anat                     \
                        -atlas_followers -overwrite_resp S             \
                        -prefix ${subj}_SurfVol_Alnd_Exp 

# map volume data to the surface of each hemisphere
foreach hemi ( lh rh )
    foreach run ( $runs )
        3dVol2Surf -spec $surface_dir/std.141.${subj}_${hemi}.spec   \
                   -sv ${subj}_SurfVol_Alnd_Exp+tlrc                   \
                   -surf_A smoothwm                                    \
                   -surf_B pial                                        \
                   -f_index nodes                                      \
                   -f_steps 10                                         \
                   -map_func ave                                       \
                   -oob_value 0                                        \
                   -grid_parent pb03.$subj.r$run.volreg+tlrc           \
                   -out_niml pb04.$subj.$hemi.r$run.surf.niml.dset 
    end
end

# make local script for running suma, and make it executable
echo suma -spec $surface_dir/std.141.${subj}_lh.spec                 \
          -sv ${subj}_SurfVol_Alnd_Exp+tlrc > run_suma
chmod 755 run_suma

# =========================== blur (on surface) ============================
foreach hemi ( lh rh )
    foreach run ( $runs )
        # to save time, estimate blur parameters only once
        if ( ! -f surf.smooth.params.1D ) then
            SurfSmooth -spec $surface_dir/std.141.${subj}_${hemi}.spec \
                       -surf_A smoothwm                                  \
                       -input pb04.$subj.$hemi.r$run.surf.niml.dset      \
                       -met HEAT_07                                      \
                       -target_fwhm 4.0                                  \
                       -blurmaster pb04.$subj.$hemi.r$run.surf.niml.dset \
                       -detrend_master                                   \
                       -output pb05.$subj.$hemi.r$run.blur.niml.dset     \
                       | tee surf.smooth.params.1D 
        else
            set params = `1dcat surf.smooth.params.1D`
            SurfSmooth -spec $surface_dir/std.141.${subj}_${hemi}.spec \
                       -surf_A smoothwm                                  \
                       -input pb04.$subj.$hemi.r$run.surf.niml.dset      \
                       -met HEAT_07                                      \
                       -Niter $params[1]                                 \
                       -sigma $params[2]                                 \
                       -output pb05.$subj.$hemi.r$run.blur.niml.dset 
        endif
    end
end

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -prefix rm.mask_r$run pb05.$subj.$hemi.r$run.blur.niml.dset
end

# create union of inputs, output type is byte
3dmask_tool -inputs rm.mask_r*+tlrc.HEAD -union -prefix full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+tlrc ----
#      (resampled from tlrc anat)
3dresample -master full_mask.$subj+tlrc -input anatQQ.${subj}+tlrc  \
           -prefix rm.resam.anat

# convert to binary anat mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+tlrc  \
            -prefix mask_anat.$subj

# compute tighter EPI mask by intersecting with anat mask
3dmask_tool -input full_mask.$subj+tlrc mask_anat.$subj+tlrc          \
            -inter -prefix mask_epi_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+tlrc mask_anat.$subj+tlrc    \
            |& tee out.mask_ae_overlap.txt

# note Dice coefficient of masks, as well
3ddot -dodice full_mask.$subj+tlrc mask_anat.$subj+tlrc               \
      |& tee out.mask_ae_dice.txt

# ---- create group anatomy mask, mask_group+tlrc ----
#      (resampled from tlrc base anat, MNI152_T1_1mm_brain.nii.gz)
3dresample -master full_mask.$subj+tlrc -prefix ./rm.resam.group      \
           -input                                                     \
           /projectnb/sternlab/tom/afni_global_session/MNI152_T1_1mm_brain.nii.gz

# convert to binary group mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.group+tlrc \
            -prefix mask_group

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach hemi ( lh rh )
    foreach run ( $runs )
        3dTstat -prefix rm.$hemi.mean_r$run.niml.dset    \
            pb05.$subj.$hemi.r$run.blur.niml.dset
        3dcalc -a pb05.$subj.$hemi.r$run.blur.niml.dset  \
               -b rm.$hemi.mean_r$run.niml.dset          \
               -expr 'min(200, a/b*100)*step(a)*step(b)' \
               -prefix pb06.$subj.$hemi.r$run.scale.niml.dset
    end
end

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 6                       \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (just to have)
1d_tool.py -infile dfile_rall.1D -set_nruns 6                       \
           -derivative -demean -write motion_deriv.1D

# convert motion parameters for per-run regression
1d_tool.py -infile motion_demean.1D -set_nruns 6                    \
           -split_into_pad_runs mot_demean

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile_rall.1D -set_nruns 6                       \
    -show_censor_count -censor_prev_TR                              \
    -censor_motion 0.5 motion_${subj}

# note TRs that were not censored
set ktrs = `1d_tool.py -infile motion_${subj}_censor.1D             \
                       -show_trs_uncensored encoded`

# ------------------------------
# run the regression analysis
foreach hemi ( lh rh )
    3dDeconvolve -input pb06.$subj.$hemi.r*.scale.niml.dset         \
        -censor motion_${subj}_censor.1D                            \
        -ortvec mot_demean.r01.1D mot_demean_r01                    \
        -ortvec mot_demean.r02.1D mot_demean_r02                    \
        -ortvec mot_demean.r03.1D mot_demean_r03                    \
        -ortvec mot_demean.r04.1D mot_demean_r04                    \
        -ortvec mot_demean.r05.1D mot_demean_r05                    \
        -ortvec mot_demean.r06.1D mot_demean_r06                    \
        -polort 3                                                   \
        -num_stimts 4                                               \
        -stim_times_AM2 1 stimuli/${subj}_txtuAM.txt 'BLOCK(4,1)' \
        -stim_label 1 TxtU                                          \
        -stim_times_AM2 2 stimuli/${subj}_txtrAM.txt 'BLOCK(4,1)' \
        -stim_label 2 TxtR                                          \
        -stim_times_AM2 3 stimuli/${subj}_symuAM.txt 'BLOCK(4,1)' \
        -stim_label 3 SymU                                          \
        -stim_times_AM2 4 stimuli/${subj}_symrAM.txt 'BLOCK(4,1)' \
        -stim_label 4 SymR                                          \
        -num_glt 18                                                 \
        -gltsym 'SYM: SymU[0] SymR[0] -TxtU[0] -TxtR[0]'            \
        -glt_label 1 Sym-Txt_mean                                   \
        -gltsym 'SYM: SymU[1] SymR[1] -TxtU[1] -TxtR[1]'            \
        -glt_label 2 Sym-Txt_AM                                     \
        -gltsym 'SYM: SymR[0] TxtR[0] -SymU[0] -TxtU[0]'            \
        -glt_label 3 Rule-Uni_mean                                  \
        -gltsym 'SYM: SymR[1] TxtR[1] -SymU[1] -TxtU[1]'            \
        -glt_label 4 Rule-Uni_AM                                    \
        -gltsym 'SYM: TxtR[0] -TxtU[0]'                             \
        -glt_label 5 TxtR-TxtU_mean                                 \
        -gltsym 'SYM: TxtR[1] -TxtU[1]'                             \
        -glt_label 6 TxtR-TxtU_AM                                   \
        -gltsym 'SYM: SymR[0] -SymU[0]'                             \
        -glt_label 7 SymR-SymU_mean                                 \
        -gltsym 'SYM: SymR[1] -SymU[1]'                             \
        -glt_label 8 SymR-SymU_AM                                   \
        -gltsym 'SYM: SymR[0] -TxtR[0]'                             \
        -glt_label 9 SymR-TxtR_mean                                 \
        -gltsym 'SYM: SymR[1] -TxtR[1]'                             \
        -glt_label 10 SymR-TxtR_AM                                  \
        -gltsym 'SYM: SymU[0] -TxtU[0]'                             \
        -glt_label 11 SymU-TxtU_mean                                \
        -gltsym 'SYM: SymU[1] -TxtU[1]'                             \
        -glt_label 12 SymU-TxtU_AM                                  \
        -gltsym 'SYM: SymR[0] -TxtU[0]'                             \
        -glt_label 13 SymR-TxtU_mean                                \
        -gltsym 'SYM: SymR[1] -TxtU[1]'                             \
        -glt_label 14 SymR-TxtU_AM                                  \
        -gltsym 'SYM: TxtR[0] -SymU[0]'                             \
        -glt_label 15 TxtR-SymU_mean                                \
        -gltsym 'SYM: TxtR[1] -SymU[1]'                             \
        -glt_label 16 TxtR-SymU_AM                                  \
        -gltsym 'SYM: SymR[0] -SymU[0] -TxtR[0] TxtU[0]'            \
        -glt_label 17 Double_Sub                                    \
        -gltsym 'SYM: SymR[1] -SymU[1] -TxtR[1] TxtU[1]'            \
        -glt_label 18 Double_Sub_AM                                 \
        -jobs 4                                                     \
        -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                     \
        -x1D_uncensored X.nocensor.xmat.1D                          \
        -fitts fitts.$subj.$hemi.niml.dset                          \
        -errts errts.${subj}.$hemi.niml.dset                        \
        -x1D_stop                                                   \
        -bucket stats.$subj.$hemi.niml.dset

    # -- execute the 3dREMLfit script, written by 3dDeconvolve --
    tcsh -x stats.REML_cmd 
end


# display any large pairwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# display degrees of freedom info from X-matrix
1d_tool.py -show_df_info -infile X.xmat.1D |& tee out.df_info.txt

# create an all_runs dataset to match the fitts, errts, etc.
foreach hemi ( lh rh )
    3dTcat -prefix all_runs.$subj.$hemi.niml.dset                   \
        pb06.$subj.$hemi.r*.scale.niml.dset
end

# --------------------------------------------------
# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
foreach hemi ( lh rh )
    3dTstat -mean -prefix rm.signal.all.$hemi.niml.dset             \
        all_runs.$subj.$hemi.niml.dset"[$ktrs]"
    3dTstat -stdev -prefix rm.noise.all.$hemi.niml.dset             \
        errts.${subj}.$hemi.niml.dset"[$ktrs]"
    3dcalc -a rm.signal.all.$hemi.niml.dset                         \
           -b rm.noise.all.$hemi.niml.dset                          \
       -c full_mask.$subj+tlrc                                      \
           -expr 'c*a/b' -prefix TSNR.$subj.$hemi.niml.dset 
end

# --------------------------------------------------------
# compute sum of non-baseline regressors from the X-matrix
# (use 1d_tool.py to get list of regressor colums)
set reg_cols = `1d_tool.py -infile X.nocensor.xmat.1D -show_indices_interest`
3dTstat -sum -prefix IDEAL.1D X.nocensor.xmat.1D"[$reg_cols]"

# also, create a stimulus-only X-matrix, for easy review
1dcat X.nocensor.xmat.1D"[$reg_cols]" > X.stim.xmat.1D

# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj    \
    -dsets pb00.$subj.r*.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 0.5 -exit0 \
    -ss_review_dset out.ss_review.$subj.txt    \
    -write_uvars_json out.ss_review_uvars.json

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -f rm.*

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) then
    ./@ss_review_basic |& tee out.ss_review.$subj.txt

    # generate html ss review pages
    # (akin to static images from running @ss_review_driver)
    apqc_make_tcsh.py -review_style basic -subj_dir . \
        -uvar_json out.ss_review_uvars.json
    tcsh @ss_review_html |& tee out.review_html
    apqc_make_html.py -qc_dir QC_$subj

    echo "\nconsider running: \n\n    afni_open -b $subj.results/QC_$subj/index.html\n"
endif

# return to parent directory (just in case...)
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id ${subj} -script proc.RPMS_2001 -scr_overwrite      \
#     -blocks tshift align tlrc volreg surf blur mask scale regress -dsets   \
#     RPMS_2001/RPMS_2001_epi_r1+orig.HEAD                                   \
#     RPMS_2001/RPMS_2001_epi_r2+orig.HEAD                                   \
#     RPMS_2001/RPMS_2001_epi_r3+orig.HEAD                                   \
#     RPMS_2001/RPMS_2001_epi_r4+orig.HEAD                                   \
#     RPMS_2001/RPMS_2001_epi_r5+orig.HEAD                                   \
#     RPMS_2001/RPMS_2001_epi_r6+orig.HEAD -surf_anat                        \
#     RPMS_2001/SUMA/RPMS_2001_SurfVol+orig -surf_spec                       \
#     RPMS_2001/SUMA/std.141.RPMS_2001_lh.spec                               \
#     RPMS_2001/SUMA/std.141.RPMS_2001_rh.spec -copy_anat                    \
#     RPMS_2001/RPMS_2001_anat+orig -blip_forward_dset                       \
#     RPMS_2001/RPMS_2001_fieldmap_ap+orig -blip_reverse_dset                \
#     RPMS_2001/RPMS_2001_fieldmap_pa+orig -volreg_align_to MIN_OUTLIER      \
#     -volreg_align_e2a -volreg_tlrc_warp -blur_size 4.0 -regress_stim_times \
#     RPMS_2001/RPMS_2001_txtuAM.txt RPMS_2001/RPMS_2001_txtrAM.txt          \
#     RPMS_2001/RPMS_2001_symuAM.txt RPMS_2001/RPMS_2001_symrAM.txt          \
#     -regress_stim_labels TxtU TxtR SymU SymR -regress_basis 'BLOCK(4,1)'   \
#     -regress_stim_types AM2 AM2 AM2 AM2 -regress_motion_per_run            \
#     -regress_censor_motion 0.5 -regress_opts_3dD -num_glt 18 -gltsym 'SYM: \
#     SymU[0] SymR[0] -TxtU[0] -TxtR[0]' -glt_label 1 Sym-Txt_mean -gltsym   \
#     'SYM: SymU[1] SymR[1] -TxtU[1] -TxtR[1]' -glt_label 2 Sym-Txt_AM       \
#     -gltsym 'SYM: SymR[0] TxtR[0] -SymU[0] -TxtU[0]' -glt_label 3          \
#     Rule-Uni_mean -gltsym 'SYM: SymR[1] TxtR[1] -SymU[1] -TxtU[1]'         \
#     -glt_label 4 Rule-Uni_AM -gltsym 'SYM: TxtR[0] -TxtU[0]' -glt_label 5  \
#     TxtR-TxtU_mean -gltsym 'SYM: TxtR[1] -TxtU[1]' -glt_label 6            \
#     TxtR-TxtU_AM -gltsym 'SYM: SymR[0] -SymU[0]' -glt_label 7              \
#     SymR-SymU_mean -gltsym 'SYM: SymR[1] -SymU[1]' -glt_label 8            \
#     SymR-SymU_AM -gltsym 'SYM: SymR[0] -TxtR[0]' -glt_label 9              \
#     SymR-TxtR_mean -gltsym 'SYM: SymR[1] -TxtR[1]' -glt_label 10           \
#     SymR-TxtR_AM -gltsym 'SYM: SymU[0] -TxtU[0]' -glt_label 11             \
#     SymU-TxtU_mean -gltsym 'SYM: SymU[1] -TxtU[1]' -glt_label 12           \
#     SymU-TxtU_AM -gltsym 'SYM: SymR[0] -TxtU[0]' -glt_label 13             \
#     SymR-TxtU_mean -gltsym 'SYM: SymR[1] -TxtU[1]' -glt_label 14           \
#     SymR-TxtU_AM -gltsym 'SYM: TxtR[0] -SymU[0]' -glt_label 15             \
#     TxtR-SymU_mean -gltsym 'SYM: TxtR[1] -SymU[1]' -glt_label 16           \
#     TxtR-SymU_AM -gltsym 'SYM: SymR[0] -SymU[0] -TxtR[0] TxtU[0]'          \
#     -glt_label 17 Double_Sub -gltsym 'SYM: SymR[1] -SymU[1] -TxtR[1]       \
#     TxtU[1]' -glt_label 18 Double_Sub_AM -jobs 4 -regress_make_ideal_sum   \
#     IDEAL.1D -copy_anat anat_warped_FSLmni152/anatSS.RPMS_2001.nii         \
#     -tlrc_base                                                             \
#     /projectnb/sternlab/tom/afni_global_session/MNI152_T1_1mm_brain.nii.gz \
#     -tlrc_NL_warp -tlrc_NL_warped_dsets                                    \
#     anat_warped_FSLmni152/anatQQ.RPMS_2001.nii.gz                          \
#     anat_warped_FSLmni152/anatQQ.RPMS_2001.aff12.1D                        \
#     anat_warped_FSLmni152/anatQQ.RPMS_2001_WARP.nii.gz -regress_3dD_stop   \
#     -regress_reml_exec
